<?xml version="1.0" encoding="UTF-8"?>

<actor-template>
  <!-- outputs the products from the comparison list using ProductCatalogActor/outputProductSummary -->
  <actor-chain id="summary" xml-combine="replace">
    <component id="productList" name="/atg/commerce/catalog/comparison/ProductList"
      component-var="productList" />
    <component id="catalogTools" name="/atg/commerce/catalog/CatalogTools" component-var="catalogTools" />
    <!-- Iterate over products in the comparison list -->
    <droplet id="forEach" name="/atg/dynamo/droplet/ForEach" var="forEachProduct">
      <input name="array" value="${productList.items}" />
      <oparam name="output">
        <actor id="productActor" name="/atg/commerce/catalog/ProductCatalogActor" chain-id="outputProductSummary"
          return-model-var="productActor">
          <input name="product" value="${forEachProduct.element.product}" />
          <output id="product" name="products[${forEachProduct.index}]" value="${productActor.product}" />
        </actor>
        <!-- output displayName of each feature into product.featureDisplayNames[] -->
        <droplet id="forEachFeature" name="/atg/dynamo/droplet/ForEach" var="forEachFeature">
          <input name="array" value="${productActor.product.features}" />
            <oparam name="output">
              <output id="productFeature" name="products[${forEachProduct.index}].featureDisplayNames[${forEachFeature.index}]" value="${forEachFeature.element.displayName}" />
           </oparam>
         </droplet>
        <!-- Iterate over properties from CatalogTools.propertyToLabelMap (keys are SKU property names to compare) -->
        <droplet id="forEach" name="/atg/dynamo/droplet/ForEach" var="property">
          <input name="array" value="${catalogTools.propertyToLabelMap}" />
          <input name="sortProperties" value="_key" />
          <oparam name="output">
          
            <!-- /atg/store/droplet/PropertyValueCollection is used to create a collection of property 
              values for a collection of repository items. An optional CollectionFilter can be applied to the values 
              to filter and/or sort them. For example if a collection of skus had the property color, then the output 
              would be a collection of the colors from each sku. Input Parameters: items - The collection of items 
              that will be used to create the collection of property values propertyName - The property to use filter 
              - An optional CollectionFilter Open Parameters: output - Rendered if there are no errors Output Parameters: 
              values - A collection of property values -->
            <droplet id="propertyValueCollection" name="/atg/store/droplet/PropertyValueCollection"
              var="propertyValueCollection">
              <input name="items" value="${forEachProduct.element.product.childSKUs}" />
              <input name="propertyName" value="${property.key}" />
              <input name="filter" value="${nucleus[catalogTools.propertyToFilterMap[property.key]]}" />
              <oparam name="output">
                <output id="values" name="products[${forEachProduct.index}].${property.key}s" value="${propertyValueCollection.values}" />
              </oparam>
            </droplet>
          </oparam>
        </droplet>
      </oparam>
    </droplet>
  </actor-chain>
</actor-template>
<!-- @version $Id: //hosting-blueprint/B2CBlueprint/version/10.2/EStore/config/atg/commerce/catalog/comparison/productListHandlerActor.xml#2 $$Change: 791340 $-->
