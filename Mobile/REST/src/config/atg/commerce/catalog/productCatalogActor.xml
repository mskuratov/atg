<?xml version="1.0" encoding="UTF-8"?>

<actor-template xsi:noNamespaceSchemaLocation="http://www.atg.com/xsds/actorChain_1.0.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <actor-chain id="getCategory">

    <droplet id="categoryLookup">
      <oparam name="output" xml-combine="replace">
        <droplet id="CatalogItemFilterDroplet" name="/atg/store/droplet/CatalogItemFilterDroplet" var="CatalogItemFilterDroplet">
            <input name="collection" value="${categoryLookupParamStack.element.childProducts}"/>
            <oparam name="output">
              <set-var name="p" value="${(param.p != null) ? param.p : '1'}"/>
              <droplet id="RangeSort" name="/atg/store/sort/RangeSortDroplet" var="RangeSort">                
                <input name="array" value="${CatalogItemFilterDroplet.filteredCollection}"/>
                <input name="howMany" value="${howMany}"/>
                <input name="start" value="${((p - 1) * howMany) + 1}"/>
                <input name="sortSelection" value="${(param.sort != null) ? param.sort : 'foo'}"/>
                <oparam name="outputStart">
                  <output id="pageNum" name="currentPageNumber" value="${p}" />
                </oparam>                
                <oparam name="output">
                  <actor id="outputProductSummary" name="/atg/commerce/catalog/ProductCatalogActor"
                    chain-id="outputProductSummary" return-model-var="productSummary">
                    <input name="product" value="${RangeSort.element}" />
                    <output id="product" name="childProducts[${RangeSort.index}]" value="${productSummary.product}" />
                  </actor>
                 </oparam>               
               </droplet>
            </oparam>            
          </droplet>
      </oparam>
    </droplet>
  </actor-chain>
  <actor-chain id="getProduct">
    <droplet id="productLookup">
      <!-- handle error output for wrongSite -->
      <oparam name="wrongSite" xml-combine="replace">
        <output id="error" name="error" value="wrongSite" />
        <!-- find correct site for item -->
        <droplet id="siteIdForCatalogItem" name="/atg/commerce/multisite/SiteIdForCatalogItem"
          var="SiteIdForCatalogItem">
          <input name="item" value="${productLookupParamStack.element}" />
          <oparam name="output">
            <!-- Use the site to create the URL to view the product -->
            <droplet id="siteLinkDroplet" name="/atg/dynamo/droplet/multisite/SiteLinkDroplet"
              var="SiteLinkDroplet">
              <input name="siteId" value="${SiteIdForCatalogItem.siteId}" />
              <input name="path" value="${SiteIdForCatalogItem.item.template.url}" />
              <input name="queryParams" value="enableFullSite=true&amp;productId=${param.productId}" />
              <oparam name="output">
                <output id="url" name="url" value="${SiteLinkDroplet.url}" />
              </oparam>
            </droplet>
          </oparam>
        </droplet>
      </oparam>
    </droplet>
  </actor-chain>
  
  <!-- optionally return recently viewed products along with the product -->
  <!-- also add list of properties that you can 'choose' to select a SKU (e.g. color, size) -->
  <actor-chain id="outputProduct">
    <droplet id="skuProperties" name="/atg/dynamo/droplet/ForEach" var="forEachProperty">
      <input name="array" value="${nucleus['/atg/commerce/catalog/CatalogTools'].propertyToLabelMap}" />
      <oparam name="output">
        <output id="skuProperties" name="product.skuProperties[${forEachProperty.index}]" value="${forEachProperty.key}" />
      </oparam>
    </droplet>
    <droplet id="switch" name="/atg/dynamo/droplet/Switch" var="switch">
      <input name="value" value="${param.getRecentlyViewedProducts}" />
      <oparam name="true">
        <actor id="recentlyViewedProducts" name="/atg/commerce/catalog/ProductCatalogActor"
          chain-id="getRecentlyViewedProducts" return-model-var="recentlyViewedProducts">
          <!-- inputs come from request parameters -->
          <output id="recentlyViewedProducts" name="recentlyViewedProducts" value="${recentlyViewedProducts.recentlyViewedProducts}"/>
        </actor>
      </oparam>
    </droplet>
  </actor-chain>

  <!-- add site id and name to product output -->
  <actor-chain id="outputProductSummary">
    <droplet id="siteIdDroplet" name="/atg/commerce/multisite/SiteIdForCatalogItem" var="SiteIdDroplet">
      <input name="item" value="${product}" />
      <input name="shareableTypeId" value="crs.MobileSite" />
      <oparam name="output">
        <output id="productSiteId" name="product.siteId" value="${siteId != null ? siteId : SiteIdDroplet.siteId}" />
        <droplet id="getSiteDroplet" name="/atg/dynamo/droplet/multisite/GetSiteDroplet"
          var="GetSiteDroplet">
          <input name="siteId" value="${siteId != null ? siteId : SiteIdDroplet.siteId}" />
          <oparam name="output">
            <output id="productSiteName" name="product.siteName" value="${GetSiteDroplet.site.name}" />
          </oparam>
        </droplet>
      </oparam>
    </droplet>
  </actor-chain>

  <!-- send a product browsed/view item event and return recently viewed products -->
  <!-- these need to be done in one request to avoid a RemovedItemException when returning recently viewed 
    products -->
  <actor-chain id="sendViewItemEventGetRecentlyViewedProducts">
    <droplet id="productLookup" name="/atg/commerce/catalog/ProductLookup" var="productLookupParamStack">
      <input name="id" value="${(productId != null) ? productId : param.productId}" />
      <input name="filterBySite" value="false" />
      <oparam name="output">
        <droplet id="productBrowsed" name="/atg/commerce/catalog/ProductBrowsed">
          <input name="eventobject" value="${productLookupParamStack.element}" />
        </droplet>
      </oparam>
    </droplet>

    <actor id="recentlyViewedProducts" name="/atg/commerce/catalog/ProductCatalogActor"
      chain-id="getRecentlyViewedProducts" return-model-var="recentlyViewedProducts">
      <!-- inputs will come from the request parameters -->
      <output id="recentlyViewedProducts" name="recentlyViewedProducts" 
        value="${recentlyViewedProducts.recentlyViewedProducts}" />
    </actor>
  </actor-chain>



</actor-template>
<!-- @version $Id: //hosting-blueprint/MobileCommerce/dev/10.2/server/MobileCommerce/config/atg/store/mobile/rest/actors/profile.xml#1 
  $$Change: 794592 $ -->