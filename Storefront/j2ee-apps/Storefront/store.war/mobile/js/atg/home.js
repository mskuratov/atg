/**
 * "Home page" Javascript functions.
 * @ignore
 */
CRSMA = window.CRSMA || {};

/**
 * @namespace "Home" Javascript Module of "Commerce Reference Store Mobile Application"
 * @description Holds functionality related to Home page.
 */
CRSMA.home = function() {
  /**
   * Internal state variables container.
   * @private
   */
  var homePageContext = {};

  /**
   * Index of current selected Promo.
   * @private
   */
  var currentPromoIndex = 0;

  /**
   * Map of correlations [PromoIndex <-> ProductIndex].
   * @private
   */
  var slidersCorrelationMap = {};

  /**
   * Variable for product slider
   * @private
   */
  var productSlider = {};

  /**
   * Converts "Recommendations" price of the given item to string.
   *
   * @param {object} pItem - Product item, from "Recommendations".
   * @return {string} Formatted price.
   * @private
   */
  var recsPrice2String = function(pItem) {
    var priceAsString;
    switch (homePageContext.currencyCode) {
      case "USD":
        priceAsString = homePageContext.currencySymbol + pItem.toFixed(2);
        break;
      case "EUR":
        priceAsString = pItem.toFixed(2) + homePageContext.currencySymbol;
        break;
      default:
        priceAsString = pItem.toFixed(2) + homePageContext.currencySymbol;
        break;
    }
    return priceAsString;
  };

  /**
   * Check if the number is even.
   *
   * @param {number} pNumber - Number to check.
   * @private
   */
  var isEven = function(/*int*/pNumber) {
    return (pNumber % 2) == 0;
  };

  /**
   * Adds blank cells around the html content passed in.
   *
   * @param {string} pHtml - Product info html.
   * @param {boolean} pDoubleRearPadding - Flag to apply double padding.
   * @return {string} Product info html, with paddings.
   * @private
   */
  var addPaddingCells = function(/*string*/pHtml, /*boolean*/pDoubleRearPadding) {
    var s = '<div class="cell"></div><div class="cell"></div>' + pHtml + '<div class="cell"></div><div class="cell"></div>';
    if (pDoubleRearPadding) {
      s += '<div class="cell"></div>';
    }

    return s;
  };

  /**
   * Gets product cell HTML.
   *
   * @param pProductsArray - Array of product details (JSON).
   *        The JSON array is generated by "/mobile/promo/gadgets/promotionalProductsJSON.jsp".
   * @return Product cell HTML.
   * @private
   */
  var getProductInfoHTML = function(/*array*/pProductsArray) {
    var s = "";
    if (pProductsArray) {
      for (var i = 0; i < pProductsArray.length; i++) {
        var product = pProductsArray[i];
        s +=
        '<div class="cell">' +
          '<a href="' + product.linkUrl + '">' +
            '<img alt="' + product.name + '" class="cellImage" src="' + product.imageUrl + '"/>' +
            '<p class="cellDetails">' +
              '<span>' + product.name + '</span>';
        if (product.prices.listPrice && product.prices.salePrice) {
          s += '<span class="saleListPrice">' + product.prices.listPrice + '</span><span class="salePrice"><b> ' + product.prices.salePrice + '</b></span>';
        } else if (product.prices.listPrice) {
          s += '<span class="salePrice"> ' + product.prices.listPrice + '</span>';
        }
        s +=
            '</p>' +
          '</a>' +
        '</div>';
      }
    }

    return s;
  };

  /**
   * Gets "Recommendations" product cell html.
   * 
   * @param pProductsArray - Array of product details (JSON).
   *        The JSON array is generated by request to "http://recs.atgsvcs.com/pr/recommendations/3.0/json/...".
   * @return "Recommendations" product cell html.
   * @private
   */
  var getProductInfoRecsHTML = function(/*array*/pProductsArray) {
    var s = "";
    if (pProductsArray) {
      for (var i = 0; i < pProductsArray.length; i++) {
        var product = pProductsArray[i];
        s +=
        '<div class="cell">' +
          '<a href="' + homePageContext.productionURL + product.url + '">' +
            '<img alt="' + product.name + '" class="cellImage" src="' + product.thumb_image_link + '"/>' +
            '<p class="cellDetails">' +
              '<span>' + product.name + '</span>' +
              '<span class="salePrice"> ' + recsPrice2String(product.price) + '</span>';
        s +=
            '</p>' +
          '</a>' +
        '</div>';
      }
    }

    return s;
  };

  /**
   * Removes items from the "sessionStorage".
   * 
   * @private
   */
  var clearSessionStorage = function() {
    var targeters = sessionStorage.getObject("targeters");
    if (targeters) {
      for (var i = 0; i < targeters.length; i++) {
        sessionStorage.removeItem(targeters[i]);
      }
    }
    sessionStorage.removeItem("targeters");
  };

  /**
   * Creates the "Promotional item" slider.
   * @private
   */
  var createPromotionalItemSlider = function() {
    CRSMA.sliders.createSlider({
      gridid           : "#homeTopSlotContent",
      numberOfCells    : 1,
      touchSensitivity : 6000,
      extension        : {
        /**
         * Calculates the middle cell based on the left position and do the appropriate action.
         * @public
         */
        postTouchMove: {
          value: function(/*int*/pLeft) {
            if (pLeft <= 0) {
              pLeft = (pLeft < 0) ? -pLeft : pLeft;
              var currentCell = Math.round(pLeft / this.colWidth);
              if (typeof this.currentCenterCell === "undefined") {
                this.currentCenterCell = currentCell;
                CRSMA.global.EventManager.publish("sliderMoveEvent", {"caller": "promo", "focusedCellIndex": currentCell});
                return;
              };
              if (this.currentCenterCell !== currentCell) {
                this.currentCenterCell = currentCell;
                CRSMA.global.EventManager.publish("sliderMoveEvent", {"caller": "promo", "focusedCellIndex": currentCell});
              }
            }
          }
        },

        /**
         * Calculates which items are on the screen, and set their display to hidden.
         * @public
         */
        postTouchEnd: {
          value: function(/*int*/pLeft, /*string*/pDuration) {
            this.postTouchMove(pLeft);
            var sliderObject = this;
            var strippedDuration = pDuration.substring(0, pDuration.length - 1) * 1000;

            setTimeout(
              function() {
                if (!sliderObject.touching && pLeft <= 0) {
                  pLeft = (pLeft < 0) ? -pLeft : pLeft;
                  var cellsOffPage = Math.round(pLeft / sliderObject.colWidth);
                  var end = cellsOffPage + 1;
                  $.each(sliderObject.cells, function(index) {
                    var $cell = $(this);
                    if (index > cellsOffPage && index <= end) {
                      $cell.show();
                    }
                  });
                }
              },
              strippedDuration
            );
          }
        }
      }
    });
  };

  /**
   * Displays promotional content item from the "sessionStorage".
   * @private
   */
  var displayPromotionalContentItems = function() {
    var html = sessionStorage.getObject("promotionalContent");
    $("#homeTopSlotContent").empty().html(html);
    createPromotionalItemSlider();
  };

  /**
   * Displays the product results based on the targeter path from "sessionStorage".
   *
   * @param {string} pTargeter - Targeter name which products should be displayed.
   * @private
   */
  var displayProducts = function(pTargeter) {
    var html = sessionStorage.getObject(pTargeter);
    if (html) {
      $("#homeBottomSlotContent").empty().html(html);

      // Create the product item slider from the html passed in
      productSlider = CRSMA.sliders.createSlider({
        gridid     : "#homeBottomSlotContent",
        cellPrefix : "cell",
        extension  : {
          /**
           * Moves slider to desired position.
           *
           * @param {number} pPosition Number of center cell.
           * @public
           */
          slideToPosition: {
            value: function(pPosition) {
              // if current cell is destination cell 
              if (pPosition != this.currentCenterCell) {
                this.currentCenterCell = pPosition;
                var cellWidth = this.productSliderCellWidth;
                var $parent = $("#homeBottomSlotContent");
                var $cells = $parent.children(".cell");
                // If there are no previous state, set to center
                if (pPosition == 0) {
                  pPosition = parseInt($cells.length / 2);
                }
                var offsetLeft = (pPosition - 1) * cellWidth * (-1) + cellWidth/2;
                $parent.css("left", offsetLeft + "px");
    
                var x = 0;
                $cells.each(function(index) {
                  $(this).css("left", x + "px");
                  x += cellWidth;
                  if (index === pPosition) {
                    $(this).find(".cellImage").toggleClass("highlightedCellImage", true);
                    var $productData = $("#homeBottomSlotProductDetails");
                    var displayInfoDivData = $(this).find(".cellDetails").html();
                    if ( $productData.html() !== displayInfoDivData ) {
                      $productData.html(displayInfoDivData);
                    }
                    // Next code allows avoid rendering problems on iOS 4.3.x
                    $productData.css("display", "none");
                    setTimeout(function() {
                      $productData.css("display", "block");
                    }, 20);
                    // Force redraw was made
                  } else {
                    $(this).find(".cellImage").toggleClass("highlightedCellImage", false);
                  }
                });
              }
            }
          },

          /**
           * Create the sliding grid out of the specified element.
           * We'll look for each child with a class of cell when we create the slide panel.
           *
           * @public
           */
          createSlidePanel: {
            value: function(/*string*/pGridId, /*string*/pCellPrefix, /*int*/pNumberOfCellsToDisplay) {
              // Since this is a promotional slider, we only want one item cell on the page,
              // so we set each cell to it parent width
              var parent = $(pGridId).parent();
              var parentContainerWidth = parent.width();
              var cellWidth = Math.floor(parentContainerWidth / pNumberOfCellsToDisplay);

              this.numberOfCellsToDisplay = pNumberOfCellsToDisplay;
              this.productSliderCellWidth = cellWidth;
              this.cellDetailsClass = pCellPrefix + "Details";
              this.cellImageClass = pCellPrefix + "Image";
              this.productInfoDisplayDiv = $("#homeBottomSlotProductDetails");

              var thisObject = this;

              $(pGridId).each(function() {
                $(this).css("position", "relative");
                $(this).parent().css("overflow", "hidden");

                var x = 0;
                var $cells = $(this).children(".cell");
                $cells.each(function(index) {
                  $(this).css({
                    width: cellWidth + "px",
                    height: "90%",
                    position: "absolute",
                    left: x + "px"
                  });
                  // We need to keep track of the cell Id so we add an Id and
                  // its index to each cell, its image, and its description
                  $(this).attr("id", pCellPrefix + "Id" + index);

                  x += cellWidth;
                });

                var pageOffSet = 0;
                if (x > parentContainerWidth) {
                  pageOffSet = -1 * ((x - parentContainerWidth) / 2);
                }
                $(this).css("left", pageOffSet);

                // In case if there are only enough cells to fit on the page, we
                // set the index of the center cell to center and subtract 1 to get start the index at 0
                var currentCellIndex = Math.ceil(pNumberOfCellsToDisplay / 2) - 1;
                thisObject.centerCellDefault = currentCellIndex;
                if (pageOffSet < 0) {
                  // Find out how many cells are off the page, and add that to the center cell index
                  var cellsOffPage = Math.round(Math.abs(pageOffSet / cellWidth));
                  currentCellIndex += cellsOffPage;
                }

                thisObject.currentCenterCell = currentCellIndex;
                thisObject.productInfoDisplayDiv.html($($cells[thisObject.currentCenterCell]).find("." + thisObject.cellDetailsClass).html());
                $($cells[thisObject.currentCenterCell]).find("." + thisObject.cellImageClass).toggleClass("highlightedCellImage");

                try {
                  document.createEvent("TouchEvent");
                  // Now that we've finished the layout we'll make our panel respond to all of the touch events
                  thisObject.makeTouchable(pGridId, 3000, x, cellWidth, parentContainerWidth,
                                           thisObject.postTouchMove, thisObject.postTouchMoveAndEnd);
                } catch(e) {
                }
              });
            }
          },

          /**
           * This function will calculate which items are on the screen, and set their display to hidden.
           *
           * @public
           */
          postTouchEnd: {
            value: function(/*int*/pLeft, /*string*/pDuration) {
              this.postTouchMove(pLeft);
              var sliderObject = this;
              var strippedDuration = pDuration.substring(0, pDuration.length - 1);
              setTimeout(
                function() {
                  if (!sliderObject.touching && pLeft <= 0) {
                    var cellsOffPage = Math.abs(pLeft) / sliderObject.colWidth;
                    var end = cellsOffPage + sliderObject.numberOfCellsToDisplay;
                    $.each(sliderObject.cells, function(index) {
                      var $cell = $(this);
                      if (index > cellsOffPage && index <= end) {
                        $cell.show();
                      }
                    });
                  }
                },
                strippedDuration
              );
            }
          },

          /**
           * This will calculate the middle cell based on the left position and do the appropriate action.
           *
           * @public
           */
          postTouchMove: {
            value: function(/*int*/pLeft) {
              if (pLeft <= 0) {
                pLeft = (pLeft < 0) ? -pLeft : pLeft;
                var currentCell = Math.round(pLeft / this.colWidth) + this.centerCellDefault;
                var cellsCount = $("#homeBottomSlotContent").children(".cell").length;
                if ((cellsCount - currentCell) <= 2) {
                  currentCell = cellsCount - 3;
                }
                if (currentCell < 2) {
                  currentCell = 2;
                }
                this.slideToPosition(currentCell);
                CRSMA.global.EventManager.publish("sliderMoveEvent", {"caller": "product", "focusedCellIndex": currentCell});
              }
            }
          }
        } //END of extension
      });
    }
  };

  /**
   * Displays 1-st Targeter products.
   * <p>
   * <b>NOTE:</b>
   *   This function also calls "CRSMA.global.hideLoadingWindow" because:
   *   <ol>
   *     <li>It's always called in async method "$.ajax" - just after all promotional products are retrieved.</li>
   *     <li>It's also always called after promo products getting from cache (sessionStorage)</li>
   *   </ol>
   * </p>
   * @private
   */
  var displayFirstTargeterProducts = function() {
    var targeters = sessionStorage.getObject("targeters");
    if (targeters) {
      displayProducts(targeters[0]);
    }

    // Hide "Loading..." spinner
    CRSMA.global.hideLoadingWindow();
  };

  /**
   * Displays the product results based on the index from "sessionStorage".
   *
   * @param {number} pIndex - Targeter index.
   * @private
   */
  var displayProductsFromIndex = function(pIndex) {
    var targeters = sessionStorage.getObject("targeters");
    if (targeters) {
      displayProducts(targeters[pIndex]);
    }
  };

  /**
   * Makes marker value to use to uniquely identify promotional content.
   *
   * @return Unique marker.
   * @private
   */
  var makePromoContentMarker = function() {
    var userId = CRSMA.global.getCookieByName("DYN_USER_ID");
    return homePageContext.productionURL + "|" + homePageContext.loggedIn + "|" + userId + "|" + homePageContext.userGender + "|" + homePageContext.locale;
  };

  /**
   * Retrieves the product results from the targeters.
   *
   * @private
   */
  var retrievePromotionalContentProducts = function() {
    clearSessionStorage();

    $.getJSON(homePageContext.productionURL + "promo/gadgets/homePromotionalProductsJSON.jsp", function(data) {
      var targeters = [];
      var emptyTargeter; // Name of the targeter which didn't return any products

      $.each(data.targeterResults, function(index, collection) {
        // Store the targeter names to use as a key to retrieve them from "sessionStorage"
        targeters[index] = collection.targeter;

        if (collection.products.length == 0) {
          // This assumes that if there are no results, that means that we should fill it with "Recommendations"
          emptyTargeter = collection.targeter;
        } else {
          var padding = isEven(collection.products.length);
          var html = addPaddingCells(getProductInfoHTML(collection.products), padding);
          sessionStorage.setObject(collection.targeter, html);
        }
      });

      // If we have a targerer that needs to show "Recommendations" results, let's get them now
      if (emptyTargeter) {
        if (typeof homePageContext.retailerId !== "undefined" && homePageContext.retailerId != null && homePageContext.retailerId != "") {
          var cookies = getRecCookies();
          var recUrl = "http://recs.atgsvcs.com/pr/recommendations/3.0/json/" + homePageContext.retailerId + "/";
          if (cookies.visitorId) {
            recUrl += cookies.visitorId;
          }

          recUrl += "?";

          if (cookies.sessionId) {
            recUrl += "sessionId=" + cookies.sessionId + "&";
          }

          // We want the thumbnail image, so we add "slots.homeChildren.dataItems=thumb_image_link" to URL
          recUrl += "slots.homeChildren.numRecs=7&slots.homeChildren.dataItems=thumb_image_link&channel=mobile";

          $.ajax({
            type: "GET",
            dataType: "jsonp",
            url: recUrl,
            success: function(data) {
              var padding = isEven(data.slots.homeChildren.recs.length);
              var html = addPaddingCells(getProductInfoRecsHTML(data.slots.homeChildren.recs), padding);
              sessionStorage.setObject(emptyTargeter, html);
            }
          });
        } else {
          // In this case, "Recommendations" isn't installed, so for now lets just fill it in with data from CRS
          $.getJSON(homePageContext.productionURL + "promo/gadgets/homeNoRecsProductsJSON.jsp", function(data) {
            $.each(data.targeterResults, function(index, collection) {
              var padding = isEven(collection.products.length);
              var html = addPaddingCells(getProductInfoHTML(collection.products), padding);
              sessionStorage.setObject(emptyTargeter, html);
            });
          });
        }
      }

      sessionStorage.setItem("promoContentMarker", makePromoContentMarker()); // Reset marker
      sessionStorage.setObject("targeters", targeters);

      displayFirstTargeterProducts();
    });
  };

  /**
   * Displays the product information from the sessionStorage or retrieves it if doesn't exist.
   *
   * @private
   */
  var displayPromotionalContentProducts = function() {
    var currentMarker = makePromoContentMarker();
    var storedMarker = sessionStorage.getItem("promoContentMarker");

    // If nothing to show or marker is changed
    if (!sessionStorage.getObject("targeters") || storedMarker != currentMarker) {
      retrievePromotionalContentProducts();
    } else {
      displayFirstTargeterProducts();
    }
  };

  /**
   * Creates and returns "Recommendations" cookies to use in rec request.
   *
   * @return Created cookies object.
   * @private
   */
  var getRecCookies = function() {
    var cookies = {};
    cookies.visitorId = CRSMA.global.getCookieByName("atgRecVisitorId");
    cookies.sessionId = CRSMA.global.getCookieByName("atgRecSessionId");
    return cookies;
  };
  
  /**
   * Changes the class on the circle id to signify whether it's on or off.
   *
   * @param {string} pGridId - Circle id.
   * @param {boolean} pStatus - Indicator if circle is on.
   * @private
   */
  var setCircleStatus = function(pGridId, pStatus) {
    var $circleItem = $("#pageCircle_" + pGridId);
    var addClassValue = "BLANK";
    var removeClassValue = "ON";
    if (pStatus) {
      addClassValue = "ON";
      removeClassValue = "BLANK";
    }
    $circleItem.removeClass(removeClassValue).addClass(addClassValue);
  };

  /**
   * Redraws "Promotional products" slider.
   *
   * @private
   */
  var redrawProductSlider = function() {
    var correlationIndex = slidersCorrelationMap[currentPromoIndex];
    if (typeof correlationIndex === "undefined") {
      correlationIndex = 0;
    }
    displayProductsFromIndex(currentPromoIndex);
    
    productSlider.slideToPosition(correlationIndex);
  };

  /**
   * Handler for slider event.
   *
   * @param pEvent Event object 
   * @param pParams
   * @private 
   */
  var sliderEventHandler = function(pEvent, pParams) {
    var caller = pParams.caller;
    var index = pParams.focusedCellIndex;

    if (caller === "promo") {
      setCircleStatus(index, true);
      setCircleStatus(currentPromoIndex, false);
      currentPromoIndex = index;
      redrawProductSlider();
    } else {
      slidersCorrelationMap[currentPromoIndex] = index;
    }
  };

  CRSMA.global.EventManager.subscribe("sliderMoveEvent", sliderEventHandler);
  
  /**
   * Initializes the home page.<br/>
   *
   * First, stores the promotional content items in case we need to re-render them
   * in case of orientation changes.<br/>
   *
   * Then, registers the templates for product info JSON.
   * Then displays the product info from the "sessionStorage", if present. Otherwise, downloads the product JSON,
   * stores and displays it.
   *
   * @param {string} pRetailerId - Retailer Id. Empty string, if "Recommendations" module is not installed.
   * @param {string} pProductionURL - The site production base URL ("/mobile/" path suffix is also included).
   * @param {string} pLoggedIn - Indicator if the user is logged in.
   * @param {string} pUserGender - User gender: male, female or "unknown" (if user is not logged in).
   * @param {string} pCurrencyCode - ISO 4217 currency code.
   * @param {string} pCurrencySymbol - Currency symbol.
   * @public
   */
  var initHomePage = function(pRetailerId, pProductionURL, pLoggedIn, pUserGender, pCurrencyCode, pCurrencySymbol, pLocale) {
    // Save internal state
    homePageContext.retailerId = pRetailerId;
    homePageContext.productionURL = pProductionURL;
    homePageContext.loggedIn = pLoggedIn;
    homePageContext.userGender = pUserGender;
    homePageContext.currencyCode = pCurrencyCode;
    homePageContext.currencySymbol = pCurrencySymbol;
    homePageContext.locale = pLocale;

    // Save the promotional content items and create the slider
    var html = $("#homeTopSlotContent").html();
    sessionStorage.removeItem("promotionalContent");
    sessionStorage.setObject("promotionalContent", html);
    createPromotionalItemSlider();

    // Add this orientationchange/resize event to re-render the parents/child so that things are centered correctly
    var orientationSupport = "onorientationchange" in window, orientationEvent = orientationSupport ? "orientationchange" : "resize";
    window.addEventListener(orientationEvent, function() {
      displayPromotionalContentItems();
      displayPromotionalContentProducts();
    }, false);

    displayPromotionalContentProducts();
  };

  /**
   * "CRSMA.home" public list
   */
  return {
    // Methods
    "initHomePage" : initHomePage
  }
}();
